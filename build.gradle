/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2019-2025 Andres Almiray.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'java-library'
    id 'groovy'
    id 'org.kordamp.gradle.groovy-project'
    id 'org.kordamp.gradle.plugin'
}

config {
    info {
        name          = rootProject.name
        description   = 'Jandex Gradle Plugin'
        inceptionYear = '2019'
        tags          = ['jandex']

        specification { enabled = false }
    }

    docs {
        groovydoc {
            replaceJavadoc = true
        }
    }

    plugins {
        plugin {
            name                = 'jandex'
            id                  = 'org.kordamp.gradle.jandex'
            implementationClass = 'org.kordamp.gradle.plugin.jandex.JandexPlugin'
        }
    }
}

repositories {
    gradlePluginPortal()
}

dependencies {
    compileOnly gradleApi()

    compileOnly "io.smallrye:jandex:$jandexVersion"
    api "org.kordamp.gradle:base-gradle-plugin:$kordampPluginVersion"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testImplementation 'org.assertj:assertj-core:3.11.1'
    testImplementation "io.smallrye:jandex:$jandexVersion"

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
}

processResources {
    inputs.property('version', project.version)
    filesMatching(['**/*.properties']) {
        expand(
            version      : project.version,
            id           : 'jandex',
            name         : 'Jandex Gradle plugin',
            jandexVersion: jandexVersion
        )
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
configurations.functionalTestRuntimeOnly.extendsFrom(configurations.testRuntimeOnly)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}
